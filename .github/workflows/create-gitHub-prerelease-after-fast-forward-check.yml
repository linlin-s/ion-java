name: Create gitHub prerelease after fast-forward check
on:
  pull_request:
    types:
      - closed

jobs:
  check-version-number:
    name: check-version-number
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.check-version-change.outputs.result }}
    steps:
      - name: Switch to the branch of the pull request
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          path: ion-java-new

      - name: Checkout the current repository master branch
        uses: actions/checkout@v3
        with:
          repository: linlin-s/ion-java
          ref: master
          path: ion-java-current
          depth: 2

      - name: Check whether the pull request contains version number bump
        id: check-version-change
        run: |
          cd /home/runner/work/ion-java/ion-java/ion-java-new
          versionNew=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo $versionNew
          commitID=$(git rev-parse HEAD)
          cd /home/runner/work/ion-java/ion-java/ion-java-current
          versionCurrent=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo $versionCurrent
          if [[ $versionNew != $versionCurrent ]]; then echo "::set-output name=result::pass"; else echo "::set-output name=result::failed"; fi

  draft-release:
    needs: check-version-bump
    runs-on: ubuntu-latest
    if: ${{ needs.check-version-bump.outputs.result == 'pass' }}
    name: draft-release

    steps:
      - name: Access to the incoming release
        uses: actions/checkout@v3
        with:
          repository: amzn/ion-java
          path: current_release

      - name: Build ion-java
        run: |
          cd current_release
          mvn clean install -DskipTests

      - name: Upload the executable jar to artifacts
        run: |
          cd current_release/target
          echo "path=$(readlink -f $(ls *.jar))" >> $GITHUB_ENV
          echo "file_name=$(ls *.jar)" >> $GITHUB_ENV
          echo "version_number=$(echo $(ls *.jar) | cut -d'-' -f3)" >> $GITHUB_ENV

      - name: Create new release
        id: create_new_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.version_number }}
          release_name: v${{ env.version_number }}
          prerelease: true

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_new_release.outputs.upload_url }}
          asset_path: ${{ env.path }}
          asset_name: ${{ env.file_name }}
          asset_content_type: application/zip