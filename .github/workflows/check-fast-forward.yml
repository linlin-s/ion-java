name: Fast-forward checking before release
on: [pull_request]


jobs:
  check-version-changes:
    name: check-version-changes
    runs-on: ubuntu-latest
    steps:
      - name: Switch to the branch of in-coming pull request
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          path: ion-java-new

      - name: Checkout the current repository
        uses: actions/checkout@v3
        with:
          repository: linlin-s/ion-java
          ref: master
          path: ion-java-current

      - name: Check if the in-coming commit contains version number changes compare to the current HEAD commit
        run: |
          cd ion-java-new
          versionNew=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          commitID=$(git rev-parse HEAD)
          echo $versionNew
          cd  /home/runner/work/ion-java/ion-java/ion-java-current
          versionCurrent=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo $versionCurrent
          if [[ $versionNew != $versionCurrent ]]; then echo "version bump check pass"; else exit 1; fi 

  comment-pull-request:
    needs: check-version-changes
    name: Comment pull request when no version bump include
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
      - name: Create comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            This PR doesn't contain version number bump and will not trigger ion-java auto release process.

  fast-forward-check:
    needs: check-version-changes
    name: fast-forward-check
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Access to the last release
        uses: oprypin/find-latest-tag@v1
        id: check_last_release
        with:
          repository: amzn/ion-java
          releases-only: true

      - name: Checkout the last release
        uses: actions/checkout@v3
        with:
          repository: linlin-s/ion-java
          ref: ${{ steps.check_last_release.outputs.tag }}
          path: last_release

      - name: Get the commit id of the last release
        run: |
          cd last_release
          echo "last_release_commit_id=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Access to the incoming release
        uses: actions/checkout@v3
        with:
          repository: linlin-s/ion-java
          ref: ${{ github.event.pull_request.head.sha }}
          path: ion-java-new

      - name: Get the commit id of the incoming release
        run: |
          cd ion-java-new
          echo "current_release_commit_id=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo $(git rev-parse HEAD)

      - name: Check whether the incoming release is fast-forward compared to the last release
        run: |
          cd ion-java-new 
          if git merge-base --is-ancestor ${{env.last_release_commit_id}} ${{env.current_release_commit_id}}; then echo "Trigger github release"; else exit 1; fi 

  GitHub-draft-release:
    name: GitHub-draft-release
    needs: fast-forward-check
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Access to the incoming release
        uses: actions/checkout@v3
        with:
          repository: amzn/ion-java
          path: current_release

      - name: Build ion-java
        run: |
          cd current_release
          git submodule init
          git submodule update
          mvn clean install

      - name: Upload the executable jar to artifacts
        run: |
          cd current_release/target
          echo "path=$(readlink -f $(ls *.jar))" >> $GITHUB_ENV
          echo "file_name=$(ls *.jar)" >> $GITHUB_ENV
          echo "version_number=$(echo $(ls *.jar) | cut -d'-' -f3)" >> $GITHUB_ENV

      - name: Create new release
        id: create_new_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.version_number }}
          release_name: v${{ env.version_number }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_new_release.outputs.upload_url }}
          asset_path: ${{ env.path }}
          asset_name: ${{ env.file_name }}
          asset_content_type: application/zip
